module.exports = [{"name":"Graphics","description":"GraphicsJs wrapper component.\n\nWith this component, you will be able to draw onto the element created using\nall of GraphicJs's API.\n\nsetup() and draw() callbacks are supplied to this component.\n\nThe setup() callback allows you to supply additional setup tasks for the\nstage object.\n\nThe draw() callback is where you preform drawing functions on the stage\nobject.","props":{"setup":{"defaultValue":null,"description":"Setup callback. The function passed to this prop will run after\nthe stage is initialized and before the draw callback is called.\nThis function will only be called once.","name":"setup","required":false,"type":{"name":"((stage: any) => void) | undefined"}},"draw":{"defaultValue":null,"description":"Draw callback. The function passed to this prop will run every\nanimation frame.","name":"draw","required":false,"type":{"name":"((stage: any) => void) | undefined"}},"style":{"defaultValue":{"value":"{\n      bottom: 0,\n      height: '100%',\n      left: 0,\n      position: 'relative',\n      right: 0,\n      top: 0,\n      width: '100%',\n    }"},"description":"Styles passed to this prop will be applied to stage div element","name":"style","required":false,"type":{"name":"CSSProperties | undefined"}}},"code":"import * as React from 'react';\n\nexport interface IGraphicsProps {\n    /**\n     * Setup callback. The function passed to this prop will run after\n     * the stage is initialized and before the draw callback is called.\n     * This function will only be called once.\n     */\n    setup?: (stage: acgraph.vector.Stage) => void,\n    /**\n     * Draw callback. The function passed to this prop will run every\n     * animation frame.\n     */\n    draw?: (stage: acgraph.vector.Stage) => void,\n    /**\n     * Styles passed to this prop will be applied to stage div element\n     */\n    style?: React.CSSProperties,\n}\n\ntype GraphicsState = Readonly< {\n  /**\n   * The stage upon which the drawing will be performed\n   */\n  stage: acgraph.vector.Stage | null,\n}>;\n\n/**\n * GraphicsJs wrapper component.\n *\n * With this component, you will be able to draw onto the element created using\n * all of GraphicJs's API.\n *\n * setup() and draw() callbacks are supplied to this component.\n *\n * The setup() callback allows you to supply additional setup tasks for the\n * stage object.\n *\n * The draw() callback is where you preform drawing functions on the stage\n * object.\n */\nexport default class Graphics extends React.Component<IGraphicsProps, GraphicsState> {\n  public static defaultProps: Partial<IGraphicsProps> = {\n    style: {\n      bottom: 0,\n      height: '100%',\n      left: 0,\n      position: 'relative',\n      right: 0,\n      top: 0,\n      width: '100%',\n    }\n  }\n\n  public state: GraphicsState = {stage: null};\n\n  public componentDidMount() {\n    const { style } = this.props;\n    const { width, height } = style!;\n    const stage: acgraph.vector.Stage = acgraph.create('stage', width, height)\n    this.setState({stage});\n    if (this.props.setup) {\n      this.props.setup(stage);\n    }\n  }\n\n  public render() {\n    const { draw, style } = this.props;\n    if (this.state.stage && draw) {\n      draw(this.state.stage);\n    }\n\n    return (\n      <div id=\"stage\" style={{...style }} />\n    );\n  }\n}\n","examples":[{"name":"Example","code":"import * as React from 'react';\nimport Graphics from 'react-graphics/Graphics';\n\n/**\n * A basic example of the Graphics component\n * This example comes directly from the GraphicsJs website\n * http://www.graphicsjs.org/\n *\n * @class Example\n * @extends {React.Component}\n */\nclass Example extends React.Component {\n  public render() {\n    return (\n      <Graphics draw={this.draw} style={{width: 350, height: 300}}/>\n    );\n  }\n\n  /**\n   * Graphic's draw callback.\n   * All of the drawing functions are performed here.\n   * Notice the stage object being provided.\n   *\n   * @private\n   * @param {acgraph.vector.Stage} stage\n   * @memberof Example\n   */\n  private draw(stage: acgraph.vector.Stage) {\n    // draw the square\n    stage.rect(0, 0, 350, 300);\n\n    // draw the circle\n    stage.circle(175, 200, 100);\n\n    // draw the triangle\n    stage\n      .path()\n      .moveTo(0, 300)\n      .lineTo(175, 0)\n      .lineTo(350, 300)\n      .close();\n\n    // draw the wand in the middle\n    stage\n      .path()\n      .moveTo(175, 0)\n      .lineTo(175, 300);\n  }\n}\n\nexport default Example;\n"}]}]